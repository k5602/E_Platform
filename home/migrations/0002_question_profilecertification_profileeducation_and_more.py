# Generated by Django 5.2 on 2025-04-30 09:05

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('home', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('explanation', models.TextField(blank=True, help_text='Explanation shown after answering')),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ProfileCertification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Certification Name')),
                ('issuing_organization', models.CharField(default='', max_length=100, verbose_name='Issuing Organization')),
                ('issue_date', models.DateField(blank=True, null=True, verbose_name='Issue Date')),
                ('expiration_date', models.DateField(blank=True, null=True, verbose_name='Expiration Date')),
                ('credential_id', models.CharField(blank=True, max_length=100, verbose_name='Credential ID')),
                ('credential_url', models.URLField(blank=True, verbose_name='Credential URL')),
                ('is_visible', models.BooleanField(default=True, verbose_name='Visible')),
                ('order', models.IntegerField(default=0, verbose_name='Order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile_certifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Certification',
                'verbose_name_plural': 'Certifications',
                'ordering': ['-issue_date', 'order'],
            },
        ),
        migrations.CreateModel(
            name='ProfileEducation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution', models.CharField(max_length=100, verbose_name='Institution')),
                ('degree', models.CharField(max_length=100, verbose_name='Degree')),
                ('field_of_study', models.CharField(max_length=100, verbose_name='Field of Study')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_visible', models.BooleanField(default=True, verbose_name='Visible')),
                ('order', models.IntegerField(default=0, verbose_name='Order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile_education', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Education',
                'verbose_name_plural': 'Education',
                'ordering': ['-end_date', '-start_date', 'order'],
            },
        ),
        migrations.CreateModel(
            name='ProfileExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.CharField(max_length=100, verbose_name='Company')),
                ('position', models.CharField(max_length=100, verbose_name='Position')),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='Location')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_visible', models.BooleanField(default=True, verbose_name='Visible')),
                ('order', models.IntegerField(default=0, verbose_name='Order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile_experience', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Experience',
                'verbose_name_plural': 'Experience',
                'ordering': ['-end_date', '-start_date', 'order'],
            },
        ),
        migrations.CreateModel(
            name='ProfileProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('url', models.URLField(blank=True, verbose_name='URL')),
                ('image', models.ImageField(blank=True, null=True, upload_to='profile/projects/', verbose_name='Image')),
                ('technologies', models.CharField(blank=True, max_length=200, verbose_name='Technologies')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('is_visible', models.BooleanField(default=True, verbose_name='Visible')),
                ('order', models.IntegerField(default=0, verbose_name='Order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile_projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'ordering': ['-end_date', '-start_date', 'order'],
            },
        ),
        migrations.CreateModel(
            name='ProfileUserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text='Tell us about yourself', verbose_name='Biography')),
                ('location', models.CharField(blank=True, help_text='City, Country', max_length=100, verbose_name='Location')),
                ('website', models.URLField(blank=True, help_text='Your personal or professional website', verbose_name='Website')),
                ('social_links', models.JSONField(blank=True, default=dict, help_text='Your social media profiles', verbose_name='Social Media Links')),
                ('privacy_settings', models.JSONField(blank=True, default=dict, help_text='Control who can see your profile information', verbose_name='Privacy Settings')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('is_correct', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='home.question')),
            ],
            options={
                'verbose_name': 'Answer',
                'verbose_name_plural': 'Answers',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('time_limit', models.PositiveIntegerField(default=30, help_text='Time limit in minutes')),
                ('passing_score', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='home.subject')),
            ],
            options={
                'verbose_name': 'Quiz',
                'verbose_name_plural': 'Quizzes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='question',
            name='quiz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='home.quiz'),
        ),
        migrations.CreateModel(
            name='UserAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('score', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('timed_out', 'Timed Out')], default='in_progress', max_length=20)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='home.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Attempt',
                'verbose_name_plural': 'User Attempts',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='UserAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_answer', models.TextField(blank=True, help_text='For short answer questions', null=True)),
                ('marks_obtained', models.PositiveIntegerField(default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='home.question')),
                ('selected_answer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_selections', to='home.answer')),
                ('user_attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='home.userattempt')),
            ],
            options={
                'verbose_name': 'User Answer',
                'verbose_name_plural': 'User Answers',
            },
        ),
        migrations.CreateModel(
            name='ProfileSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Skill Name')),
                ('proficiency', models.IntegerField(choices=[(1, 'Beginner'), (2, 'Elementary'), (3, 'Intermediate'), (4, 'Advanced'), (5, 'Expert')], default=3, verbose_name='Proficiency')),
                ('is_visible', models.BooleanField(default=True, verbose_name='Visible')),
                ('order', models.IntegerField(default=0, verbose_name='Order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile_skills', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
                'ordering': ['-proficiency', 'order', 'name'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.AddIndex(
            model_name='quiz',
            index=models.Index(fields=['subject'], name='home_quiz_subject_f4dc01_idx'),
        ),
        migrations.AddIndex(
            model_name='userattempt',
            index=models.Index(fields=['user'], name='home_userat_user_id_eeae1d_idx'),
        ),
        migrations.AddIndex(
            model_name='userattempt',
            index=models.Index(fields=['quiz'], name='home_userat_quiz_id_00f92d_idx'),
        ),
        migrations.AddIndex(
            model_name='userattempt',
            index=models.Index(fields=['status'], name='home_userat_status_ea8ce0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='useranswer',
            unique_together={('user_attempt', 'question')},
        ),
    ]
